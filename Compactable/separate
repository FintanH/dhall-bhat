{-

mapEither maps a function to Either over the `f` and `separate`s `Left`s from `Right`s.

Examples:

```
    let E = constructors (./Either/Type Natural Natural)

in  ./Compactable/mapEither
    List
    ./List/compactable
    ./List/functor
    Natural
    Natural
    (λ(n : Natural) → if Natural/even n then E.Left n else E.Right n)
    [ 1, 2, 3, 4, 5 ]
= { _1 = [ 2, 4 ], _2 = [ 1, 3, 5 ] }
```

-}
    let Either = ./../Either/Type

in    λ(f : Type → Type)
    → λ(c : ./Type f)
    → λ(l : Type)
    → λ(r : Type)
    → λ(fa : f (Either l r))
    → c.mapEither
      (Either l r)
      l
      r
      ((./../Function/category).identity (Either l r))
      fa
