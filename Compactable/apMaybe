    let Applicative = ./../Applicative/Type

in  let extractFunctor = ./../Applicative/extractFunctor

in    λ(f : Type → Type)
    → λ(c : ./Type f)
    → λ(applicative : Applicative f)
    → λ(a : Type)
    → λ(b : Type)
    → λ(k : f (a → Optional b))
    → λ(fa : f a)
    → c.compact
      (extractFunctor f applicative)
      b
      (applicative.ap a (Optional b) k fa)
