    let State = ./Type

in  let Monad = ../Monad/Type

in    λ(s : Type)
    → { applicative =
          ./Applicative  s
      , monad =
          { bind =
                λ(a : Type)
              → λ(b : Type)
              → λ(fa : State s a)
              → λ(k : a → State s b)
              → λ(new : s)
              →     let res = fa new

                in  let fb = k res.val

                in  let newRes = fb res.state

                in  { state = newRes.state, val = newRes.val }
          }
      }
