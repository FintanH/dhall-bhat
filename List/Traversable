    let Traversable = ../Traversable/Type

in  let Applicative = ../Applicative/Type

in  let liftA2 = ../Applicative/liftA2

in  let fold = ./Foldable .fold

in  { foldable =
        ./Foldable
    , functor =
        ./Functor
    , traversable =
        { traverse =
              λ(f : Type → Type)
            → λ(applicative : Applicative f)
            → λ(a : Type)
            → λ(b : Type)
            → λ(g : a → f b)
            → λ(ts : List a)
            →     let liftCons =
                        liftA2
                        f
                        applicative
                        b
                        (List b)
                        (List b)
                        (λ(x : b) → λ(xs : List b) → [ x ] # xs)

              in  fold
                  a
                  ts
                  (f (List b))
                  (λ(x : a) → λ(y : f (List b)) → liftCons (g x) y)
                  (applicative.applicative.pure (List b) ([] : List b))
        }
    }
