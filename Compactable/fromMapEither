{-

fromSeparate gives a Compactable instance by supplying a functor instance for f and the separate function.

`compact` can be defined by converting `Option a` into `Either a {}`, using `separate` and take the `_1`
element from the tuple.

-}
    let Either = ./../Either/Type

in    λ(f : Type → Type)
    → λ ( mapEither
        :   ∀(a : Type)
          → ∀(l : Type)
          → ∀(r : Type)
          → (a → Either l r)
          → f a
          → { _1 : f l, _2 : f r }
        )
    →   { mapEither =
            mapEither
        , mapOptional =
              λ(a : Type)
            → λ(b : Type)
            → λ(k : a → Optional b)
            → λ(fa : f a)
            →     let E = constructors (Either {} b)
              
              in  ( mapEither
                    a
                    {}
                    b
                    ( (./../Function/category).compose
                      a
                      (Optional b)
                      (Either {} b)
                      (   λ(optional : Optional b)
                        → Optional/fold
                          b
                          optional
                          (Either {} b)
                          E.Right
                          (E.Left {=})
                      )
                      k
                    )
                    fa
                  )._2
        }
      : ./Type f
