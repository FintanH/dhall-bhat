    let Reader = ./Type

in  let Applicative = ../Applicative/Type

in  let ReaderApplicative
        : ∀(r : Type) → Applicative (Reader  r)
        =   λ(r : Type)
          → { applicative =
                { ap   =
                      λ(a : Type)
                    → λ(b : Type)
                    → λ(g : Reader  r (a → b))
                    → λ(fa : Reader  r a)
                    → { runReader =
                          λ(env : r) → g.runReader env (fa.runReader env)
                      }
                , pure = λ(a : Type) → λ(x : a) → { runReader = λ(env : r) → x }
                }
            , functor     = ./Functor  r
            }

in  ReaderApplicative
