    let Traversable = ./../Traversable/Type

in  let Applicative = ./../Applicative/Type

in    λ(f : Type → Type)
    → λ(traversable : Traversable f)
    →     ./Foldable f traversable.{ fold }
        ∧ ./Functor f
        ∧ { traverse =
                λ(g : Type → Type)
              → λ(applicative : Applicative g)
              → λ(a : Type)
              → λ(b : Type)
              → λ(k : a → g b)
              → λ(yoneda : ./Type f a)
              → applicative.map
                (f b)
                (./Type f b)
                (./liftYoneda f traversable.{ map } b)
                ( traversable.traverse
                  g
                  applicative
                  a
                  b
                  k
                  (./lowerYoneda f a yoneda)
                )
          }
      : Traversable (./Type f)
