    let Functor = ./../Functor/Type

in  let Traversable = ./../Traversable/Type

in  let Compose = ./Type

in    λ(f : Type → Type)
    → λ(g : Type → Type)
    → λ(fTraversable : Traversable f)
    → λ(gTraversable : Traversable g)
    →   ./../Traversable/extractFunctor
        (Compose f g)
        (./Traversable f g fTraversable gTraversable)
      : Functor (Compose f g)
