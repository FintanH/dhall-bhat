    let Traversable = ../Traversable/Type

in  let Applicative = ../Applicative/Type

in  let fold =
          https://ipfs.io/ipfs/QmQ8w5PLcsNz56dMvRtq54vbuPe9cNnCCUXAQp6xLc6Ccx/Prelude/Optional/fold

in  { foldable =
        ./Foldable
    , functor =
        ./Functor
    , traversable =
        { traverse =
              λ(f : Type → Type)
            → λ(applicative : Applicative f)
            → λ(a : Type)
            → λ(b : Type)
            → λ(g : a → f b)
            → λ(ts : Optional a)
            → fold
              a
              ts
              (f (Optional b))
              (   λ(x : a)
                → applicative.functor.map
                  b
                  (Optional b)
                  (λ(y : b) → [ y ] : Optional b)
                  (g x)
              )
              (applicative.applicative.pure (Optional b) ([] : Optional b))
        }
    }
