    let Traversable = ./../Traversable/Type

in  let Applicative = ./../Applicative/Type

in  let Compose = ./Type

in    λ(f : Type → Type)
    → λ(g : Type → Type)
    → λ(fTraversable : Traversable f)
    → λ(gTraversable : Traversable g)
    →   ./../Traversable/fromTraverse
        (Compose f g)
        (   λ(fA : Type → Type)
          → λ(applicative : Applicative fA)
          → λ(a : Type)
          → λ(b : Type)
          → λ(k : a → fA b)
          → fTraversable.traverse
            fA
            applicative
            (g a)
            (g b)
            (gTraversable.traverse fA applicative a b k)
        )
      : Traversable (./Type f g)
