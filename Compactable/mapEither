{-

mapEither maps a function to Either over the `f` and `separate`s `Left`s from `Right`s.

Examples:

```
    let E = constructors (./Either/Type Natural Natural)

in  ./Compactable/mapEither
    List
    ./List/compactable
    ./List/functor
    Natural
    Natural
    (λ(n : Natural) → if Natural/even n then E.Left n else E.Right n)
    [ 1, 2, 3, 4, 5 ]
= { _1 = [ 2, 4 ], _2 = [ 1, 3, 5 ] }
```

-}
    let Functor = ./../Functor/Type

in  let Either = ./../Either/Type

in    λ(f : Type → Type)
    → λ(c : ./Type f)
    → λ(functor : Functor f)
    → λ(a : Type)
    → λ(b : Type)
    → λ(k : a → Either a b)
    → λ(fa : f a)
    → c.separate a b (functor.map a (Either a b) k fa)
